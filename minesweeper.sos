/*
 * The main entry point for minesweeper!
 */

#include "src/memory_map.sos"
#include "src/coordinates.sos"
#include "src/assets.sos"
#include "src/grid.sos"
#include "src/events.sos"
#include "src/animator.sos"

#constant MOUSE_PIXEL_X 0x5000
#constant MOUSE_PIXEL_Y 0x5001
#constant MOUSE_COORD_X 0x5002
#constant MOUSE_COORD_Y 0x5003
#constant MINES_ARE_PLACED 0x5004
#constant MINE_COUNT 0x5005
#constant MINE_COUNT_GRID_VALUE 0x5006
#constant MUSIC_PAUSED 0x5007
#constant OLD_GRID_CLEAR_SPACES_REMAINING 0x5008

// Should we exit the game
#template_begin CHECK_QUIT()
WAS_KEY_PRESSED(KEY_Q)
JUMP_COND(RETURN, end:f)
#template_end

#template_begin RESET()
RESET_GAME()
INIT_ANIMATIONS()
copy GAME_RESULT GAME_CONTINUE
store MINES_ARE_PLACED 0

// Restart the music
neq MUSIC_PAUSED ONE
JUMP_COND(RETURN, reset_end:f)
store MUSIC_PAUSED 0
PLAY_MUSIC()
reset_end:
#template_end

// Draw the background
draw SCREEN_RECT SPRITE_MINESWEEPERBACKGROUND

// Play the music!
PLAY_MUSIC()
store MUSIC_PAUSED 0

// Initialise data in the game
copy GAME_RESULT GAME_CONTINUE
INIT_ANIMATIONS()

// Main "game" loop
loop:
// Try drawing on the grid
UPDATE_ANIMATIONS()
wait
// Keep processing events until we run out...
event_loop:
STORE_EVENT()

// If we finished processing events, return to the main loop
WAS_NO_EVENT()
JUMP_COND(RETURN, loop:b)

CHECK_QUIT()

WAS_MOUSE_BUTTON_PRESSED(MOUSE_BUTTON_LEFT)
JUMP_NOT_COND(RETURN, mouse_event_button_left_end:f)

// The left mouse button was pressed! Where?
GET_MOUSE_EVENT_PIXEL_COORDS(MOUSE_PIXEL_X, MOUSE_PIXEL_Y)

IS_WITHIN_RECT(MOUSE_PIXEL_X, MOUSE_PIXEL_Y, FULL_GRID_RECT)
JUMP_NOT_COND(RETURN, not_inside_grid:f)

// If we have lost, interacting with the grid is disabled
eq GAME_RESULT GAME_LOSE
JUMP_COND(RETURN, event_loop:b)

// Convert to grid coordinates
PIXEL_TO_GRID_COORDS(MOUSE_COORD_X, MOUSE_COORD_Y, MOUSE_PIXEL_X, MOUSE_PIXEL_Y)

// If mines have not been placed, do that now
eq MINES_ARE_PLACED ONE
JUMP_COND(RETURN, mines_placed:f)
ADD_MINES(START_NUMBER_MINES, MOUSE_COORD_X, MOUSE_COORD_Y)
store MINES_ARE_PLACED 1
mines_placed:

IS_PUSHED(MOUSE_COORD_X, MOUSE_COORD_Y)
JUMP_COND(RETURN, highlight_square:f)

// Try pushing the square...
play_sound SOUND_EFFECT_PUSH_VOLUME SOUND_EFFECT_PUSH
PUSH_SQUARE(GAME_RESULT, MOUSE_COORD_X, MOUSE_COORD_Y)
JUMP(check_game_result:f)

highlight_square:
// Highlight the squares if possible...
copy OLD_GRID_CLEAR_SPACES_REMAINING GRID_CLEAR_SPACES_REMAINING
HIGHLIGHT_OR_FILL_SQUARES(MOUSE_COORD_X, MOUSE_COORD_Y, GAME_RESULT)

// If the number of squares left changed, something was pushed, so play the sound
eq GRID_CLEAR_SPACES_REMAINING OLD_GRID_CLEAR_SPACES_REMAINING
JUMP_COND(RETURN, check_game_result:f)
play_sound SOUND_EFFECT_PUSH_VOLUME SOUND_EFFECT_PUSH

check_game_result:
eq GAME_RESULT GAME_WIN
JUMP_COND(RETURN, win:f)

eq GAME_RESULT GAME_LOSE
JUMP_COND(RETURN, lose:f)

JUMP(event_loop:b)

not_inside_grid:

// Are we on the play button?
IS_WITHIN_RECT(MOUSE_PIXEL_X, MOUSE_PIXEL_Y, PLAY_BUTTON_RECT)
JUMP_NOT_COND(RETURN, not_inside_play_button:f)

// Press down the play button
play_sound SOUND_EFFECT_PUSH_VOLUME SOUND_EFFECT_PUSH
draw PLAY_BUTTON_RECT SPRITE_PLAYPUSHED

// Reset the Game
RESET()
JUMP(event_loop:b)

not_inside_play_button:

// Are we on the music button?
IS_WITHIN_RECT(MOUSE_PIXEL_X, MOUSE_PIXEL_Y, MUSIC_BUTTON_RECT)
JUMP_NOT_COND(RETURN, not_inside_music_button:f)

// Press down the music button
play_sound SOUND_EFFECT_PUSH_VOLUME SOUND_EFFECT_PUSH
draw MUSIC_BUTTON_RECT SPRITE_MUSICPUSHED

// Change the music!
ROTATE_MUSIC()

JUMP(event_loop:b)

not_inside_music_button:

// Are we on the quit button?
IS_WITHIN_RECT(MOUSE_PIXEL_X, MOUSE_PIXEL_Y, QUIT_RECT)
JUMP_NOT_COND(RETURN, not_inside_quit_button:f)
play_sound SOUND_EFFECT_PUSH_VOLUME SOUND_EFFECT_PUSH
exit

not_inside_quit_button:

// Are we on the smiley face?
IS_WITHIN_RECT(MOUSE_PIXEL_X, MOUSE_PIXEL_Y, FACE_RECT)
JUMP_NOT_COND(RETURN, not_inside_smiley_face:f)

// Press down the smile button
play_sound SOUND_EFFECT_PUSH_VOLUME SOUND_EFFECT_PUSH
draw FACE_RECT SPRITE_SMILEPUSHED
store ANIMATOR_SMILE_PRESSED 1

JUMP(event_loop:b)

not_inside_smiley_face:

// Other locations for a left click go here

JUMP(event_loop:b)

mouse_event_button_left_end:

// Was the right mouse button pressed?
WAS_MOUSE_BUTTON_PRESSED(MOUSE_BUTTON_RIGHT)
JUMP_NOT_COND(RETURN, mouse_event_button_right_end:f)

// The left mouse button was pressed! Where?
GET_MOUSE_EVENT_PIXEL_COORDS(MOUSE_PIXEL_X, MOUSE_PIXEL_Y)

IS_WITHIN_RECT(MOUSE_PIXEL_X, MOUSE_PIXEL_Y, FULL_GRID_RECT)
JUMP_NOT_COND(RETURN, not_inside_grid:f)

// If we have lost, interacting with the grid is disabled
eq GAME_RESULT GAME_LOSE
JUMP_COND(RETURN, event_loop:b)

// Convert to grid coordinates
PIXEL_TO_GRID_COORDS(MOUSE_COORD_X, MOUSE_COORD_Y, MOUSE_PIXEL_X, MOUSE_PIXEL_Y)

// Right click the square
RIGHT_CLICK_SQUARE(MOUSE_COORD_X, MOUSE_COORD_Y)
JUMP(event_loop:b)

not_inside_grid:

// Other right mouse button events could go here

mouse_event_button_right_end:

WAS_MOUSE_BUTTON_RELEASED(MOUSE_BUTTON_LEFT)
JUMP_NOT_COND(RETURN, mouse_event_button_left_released_end:f)

// Unpress all buttons
store ANIMATOR_SMILE_PRESSED 0
UPDATE_SMILE()
draw MUSIC_BUTTON_RECT SPRITE_MUSICUNPUSHED
draw PLAY_BUTTON_RECT SPRITE_PLAYUNPUSHED

// Unhighlight all squares
UNHIGHLIGHT_ALL()

JUMP(event_loop:b)

mouse_event_button_left_released_end:

// other events go here

JUMP(event_loop:b)

// We lost the game! :(
lose:
stop_music
store MUSIC_PAUSED 1
play_sound SOUND_EFFECT_LOSE_VOLUME SOUND_EFFECT_LOSE
JUMP(event_loop:b)

// We won the game! :)
win:
stop_music
store MUSIC_PAUSED 1
play_sound SOUND_EFFECT_WIN_VOLUME SOUND_EFFECT_WIN
REVEAL_MINES()
JUMP(event_loop:b)

// Exit the game
end:

exit
