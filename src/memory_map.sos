/*
 * Keep track of how we are using memory
 */

// Special addresses
#constant INTRUCTION_POINTER -1
#constant RETURN -2

/*
 * Temporary addresses that can be used for anything
 */
#constant TEMP_ADDRESS_START 0x100
#constant TEMP_ADDRESS_END 0x200

// Common temporary variables
#constant X_COORD 0x101
#constant Y_COORD 0x102
#constant TEMP_1 0x103
#constant TEMP_2 0x104
#constant TEMP_3 0x105
#constant TEMP_4 0x106
#constant COORD_INDEX 0x107
#constant X_PIXEL 0x109
#constant Y_PIXEL 0x10a

/* 
 * Frequently used constants
 */

#constant ZERO 0x500
#constant ONE 0x501
#constant TWO 0x502
#constant GRID_WIDTH 0x503
#constant GRID_HEIGHT 0x504
#constant START_NUMBER_MINES 0x505
#constant NEGATIVE_ONE 0x506
#constant TWENTY 0x507
#constant SIXTEEN 0x508
#constant THREE 0x509
#constant FOUR 0x510
#constant FIVE 0x511
#constant SIX 0x512
#constant SEVEN 0x513
#constant EIGHT 0x514
#constant NINE 0x515
#constant TEN 0x516
#constant ELEVEN 0x517
#constant TWELVE 0x518
#constant GRID_SIZE 0x519
#constant EVENT_ADDRESS 0x51a
#constant TWO_TO_THE_SIXTEEN 0x51b
#constant TWO_TO_THE_THIRTY_TWO 0x51c
#constant ONE_HUNDRED 0x51d
#constant ONE_THOUSAND 0x51e
#constant TEN_THOUSAND 0x51f

/*
 * Include checks. This allows us to have logic in files
 * as they are included without accidentally running it
 * multiple times
 */
#constant INCLUDE_MEMORY_MAP 0x1000
#constant INCLUDE_COORDINATES 0x1001
#constant INCLUDE_ASSETS 0x1002
#constant INCLUDE_GRID 0x1003
#constant INCLUDE_EVENTS 0x1004
#constant INCLUDE_ANIMATOR 0x1005

// Space reserved for the coordinates file
#constant COORDINATES_START 0x1100
#constant COORDINATES_END 0x1FFF

// Space reserved for assets
#constant ASSETS_START 0x2000
#constant ASSETS_END   0x20FF

// Space reserved for memory memory_map
#constant MEMORY_MAP_START 0x2100
#constant MEMORY_MAP_END 0x21FF

// Temporary variables
#constant MEMORY_MAP_TEMP_1 0x2100
#constant MEMORY_MAP_TEMP_2 0x2101
#constant MEMORY_MAP_TEMP_3 0x2102
#constant MEMORY_MAP_TEMP_X 0x2103
#constant MEMORY_MAP_TEMP_Y 0x2104
#constant MEMORY_MAP_TEMP_WIDTH 0x2105
#constant MEMORY_MAP_TEMP_HEIGHT 0x2106
#constant MEMORY_MAP_TEMP_ANSWER 0x2107
#constant MEMORY_MAP_TEMP_RANDOM 0x2108
#constant MEMORY_MAP_TEMP_STACK_INDEX 02109

// Game outcomes
#constant GAME_WIN 0x21a0
#constant GAME_LOSE 0x21a1
#constant GAME_CONTINUE 0x21a2
#constant GAME_RESULT 0x21a3

// Music selection
#constant ACTIVE_MUSIC 0x21d0
#constant ACTIVE_MUSIC_VOLUME 0x21d1

// Space reserved for the grid data
#constant GRID_START 0x3000
#constant GRID_END 0x3FFF

// Space reserved for "events"
#constant EVENTS_START 0x4000
#constant EVENTS_END 0x43FF

// Space reserved for animations
#constant ANIMATOR_START 0x4400
#constant ANIMATOR_END 0x4600

// Space reserved for the main executable
#constant MAIN_START 0x5000
#constant MAIN_END 0x5FFF

// Used when debugging the commands in Godot
#constant DEBUG 0x7711

/* 
 * Essential templates
 */
#template_begin JUMP_COND(COND, TARGET)
store MEMORY_MAP_TEMP_1 TARGET
jmp COND MEMORY_MAP_TEMP_1
#template_end

#template_begin JUMP_NOT_COND(COND, TARGET)
store MEMORY_MAP_TEMP_1 TARGET
store MEMORY_MAP_TEMP_2 memory_map_skip_jump:f
jmp COND MEMORY_MAP_TEMP_2
jmp ONE MEMORY_MAP_TEMP_1
memory_map_skip_jump:
nop
#template_end

#template_begin JUMP(TARGET)
store MEMORY_MAP_TEMP_1 TARGET
jmp ONE MEMORY_MAP_TEMP_1
#template_end

#template_begin INCREMENT(TARGET)
add TARGET ONE
copy TARGET RETURN
#template_end

#template_begin DECREMENT(TARGET)
sub TARGET ONE
copy TARGET RETURN
#template_end

#template_begin SET_RECT_X(RECT, X_COORD)
store MEMORY_MAP_TEMP_2 0x0000FFFFFFFFFFFF
and RECT MEMORY_MAP_TEMP_2
copy RECT RETURN
copy MEMORY_MAP_TEMP_1 X_COORD
store MEMORY_MAP_TEMP_2 0x1000000000000
mul MEMORY_MAP_TEMP_1 MEMORY_MAP_TEMP_2
add RECT RETURN
copy RECT RETURN
#template_end

#template_begin SET_RECT_Y(RECT, Y_COORD)
store MEMORY_MAP_TEMP_2 0xFFFF0000FFFFFFFF
and RECT MEMORY_MAP_TEMP_2
copy RECT RETURN
copy MEMORY_MAP_TEMP_1 Y_COORD
store MEMORY_MAP_TEMP_2 0x100000000
mul MEMORY_MAP_TEMP_1 MEMORY_MAP_TEMP_2
add RECT RETURN
copy RECT RETURN
#template_end

#template_begin STORE_INDIRECT(INDIRECT_ADDR, ADDR)
store MEMORY_MAP_TEMP_1 ADDR
copy_indirect INDIRECT_ADDR MEMORY_MAP_TEMP_1
#template_end

#template_begin DEREFERENCE(ADDR, INDIRECT_ADDR)
store MEMORY_MAP_TEMP_1 ADDR
copy_indirect MEMORY_MAP_TEMP_1 INDIRECT_ADDR
#template_end

// Set the index of an array to the given value. I.e.: MEMORY(ARRAY + MEMORY(INDEX)) = MEMORY(VALUE)
#template_begin ARRAY_SET(ARRAY, INDEX, VALUE)
// First, calculate the correct address
store MEMORY_MAP_TEMP_1 ARRAY
add MEMORY_MAP_TEMP_1 INDEX
copy MEMORY_MAP_TEMP_1 RETURN

// Now store the value for an indirect copy...
store MEMORY_MAP_TEMP_2 VALUE

// And set the value
copy_indirect MEMORY_MAP_TEMP_1 MEMORY_MAP_TEMP_2
#template_end

// Get the value of an array and put it in TGT. I.e.: MEMORY(TGT) = MEMORY(ARRAY + MEMORY(INDEX))
#template_begin ARRAY_GET(TGT, ARRAY, INDEX)
// First, calculate the correct address
store MEMORY_MAP_TEMP_1 ARRAY
add MEMORY_MAP_TEMP_1 INDEX
copy MEMORY_MAP_TEMP_1 RETURN

// Now store the target for an indirect copy...
store MEMORY_MAP_TEMP_2 TGT

// And get the value
copy_indirect MEMORY_MAP_TEMP_2 MEMORY_MAP_TEMP_1
#template_end

// Store an event from the event queue
#template_begin STORE_EVENT()
get_event
copy EVENT_ADDRESS RETURN
#template_end

// Get a random number from 0 (inclusive) to the maximum value exclusive
#template_begin GET_RANDOM(TGT, MAX)
random
copy MEMORY_MAP_TEMP_RANDOM RETURN
// Random can return negative numbers, so we have to adjust for that...
gte MEMORY_MAP_TEMP_RANDOM ZERO
JUMP_COND(RETURN, memory_map_skip_negative_correction:f)
mul MEMORY_MAP_TEMP_RANDOM NEGATIVE_ONE
copy MEMORY_MAP_TEMP_RANDOM RETURN
memory_map_skip_negative_correction:

mod MEMORY_MAP_TEMP_RANDOM MAX
copy TGT RETURN
#template_end

// Extract the different components from a rectangle
#template_begin EXTRACT_RECT(TGT_X, TGT_Y, TGT_WIDTH, TGT_HEIGHT, RECT)
copy MEMORY_MAP_TEMP_1 RECT

mod MEMORY_MAP_TEMP_1 TWO_TO_THE_SIXTEEN
copy TGT_HEIGHT RETURN
div MEMORY_MAP_TEMP_1 TWO_TO_THE_SIXTEEN
copy MEMORY_MAP_TEMP_1 RETURN

mod MEMORY_MAP_TEMP_1 TWO_TO_THE_SIXTEEN
copy TGT_WIDTH RETURN
div MEMORY_MAP_TEMP_1 TWO_TO_THE_SIXTEEN
copy MEMORY_MAP_TEMP_1 RETURN

mod MEMORY_MAP_TEMP_1 TWO_TO_THE_SIXTEEN
copy TGT_Y RETURN
div MEMORY_MAP_TEMP_1 TWO_TO_THE_SIXTEEN
copy MEMORY_MAP_TEMP_1 RETURN

mod MEMORY_MAP_TEMP_1 TWO_TO_THE_SIXTEEN
copy TGT_X RETURN
#template_end

// Calculate if a pixel coordinate is within a rectangle
#template_begin IS_WITHIN_RECT(PIXEL_X, PIXEL_Y, RECT)
// Extract the rectangle details
store MEMORY_MAP_TEMP_ANSWER 0
EXTRACT_RECT(MEMORY_MAP_TEMP_X, MEMORY_MAP_TEMP_Y, MEMORY_MAP_TEMP_WIDTH, MEMORY_MAP_TEMP_HEIGHT, RECT)

// Does the x coordinate fit inside?
lt PIXEL_X MEMORY_MAP_TEMP_X
JUMP_COND(RETURN, is_within_rect_end:f)

add MEMORY_MAP_TEMP_WIDTH MEMORY_MAP_TEMP_X
gte PIXEL_X RETURN
JUMP_COND(RETURN, is_within_rect_end:f)

// Does the y coordinate fit inside?
lt PIXEL_Y MEMORY_MAP_TEMP_Y
JUMP_COND(RETURN, is_within_rect_end:f)

add MEMORY_MAP_TEMP_HEIGHT MEMORY_MAP_TEMP_Y
gte PIXEL_Y RETURN
JUMP_COND(RETURN, is_within_rect_end:f)

// Yes, they both do so it is inside the rectangle
store MEMORY_MAP_TEMP_ANSWER 1

is_within_rect_end:
copy RETURN MEMORY_MAP_TEMP_ANSWER
#template_end

// Stack handling templates
#template_begin STACK_CLEAR(STACK_SIZE, STACK_BASE)
store STACK_SIZE 0
#template_end

#template_begin STACK_PUSH(STACK_SIZE, STACK_BASE, VALUE)
ARRAY_SET(STACK_BASE, STACK_SIZE, VALUE)
INCREMENT(STACK_SIZE)
#template_end

#template_begin STACK_POP(TGT, STACK_SIZE, STACK_BASE)
sub STACK_SIZE ONE
copy STACK_SIZE RETURN
ARRAY_GET(TGT, STACK_BASE, STACK_SIZE)
#template_end

// Initialise memory map
JUMP_COND(INCLUDE_MEMORY_MAP, memory_map_end:f)
store NEGATIVE_ONE -1
store ZERO 0
store ONE 1
store TWO 2
store THREE 3
store FOUR 4
store FIVE 5
store SIX 6
store SEVEN 7
store EIGHT 8
store NINE 9
store TEN 10
store ELEVEN 11
store TWELVE 12
store SIXTEEN 16
store TWENTY 20
store TWO_TO_THE_SIXTEEN 0x10000
store TWO_TO_THE_THIRTY_TWO 0x100000000
store ONE_HUNDRED 100
store ONE_THOUSAND 1000
store TEN_THOUSAND 10000

// Game parameters
store GRID_WIDTH 20
store GRID_HEIGHT 10
mul GRID_WIDTH GRID_HEIGHT
copy GRID_SIZE RETURN
store START_NUMBER_MINES 40
store GAME_WIN 1
store GAME_LOSE 2
store GAME_CONTINUE 3

// Remember we are already initialised
store INCLUDE_MEMORY_MAP 1

memory_map_end:
nop
