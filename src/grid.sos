/*
 * This module contains logic for interacting with the minesweeper grid.
 */

#include "src/memory_map.sos"
#include "src/coordinates.sos"
#include "src/assets.sos"

// The meaning of different grid values
#constant GRID_UNPUSHED_NONE 0x3001
#constant GRID_UNPUSHED_FLAG 0x3002
#constant GRID_UNPUSHED_QUESTION_MARK 0x3003
#constant GRID_PUSHED_MINE 0x3004
#constant GRID_PUSHED_MINE_HIGHLIGHTED 0x3005

// These are intentionally in order and form an array
#constant GRID_MINES_0 0x3100 
#constant GRID_MINES_1 0x3101
#constant GRID_MINES_2 0x3102
#constant GRID_MINES_3 0x3103
#constant GRID_MINES_4 0x3104
#constant GRID_MINES_5 0x3105
#constant GRID_MINES_6 0x3106
#constant GRID_MINES_7 0x3107
#constant GRID_MINES_8 0x3108

// Temporary values used in this files
#constant GRID_TEMP_1 0x3200
#constant GRID_INDEX 0x3201
#constant GRID_TEMP_2 0x3202
#constant GRID_TEMP_3 0x3203
#constant GRID_TEMP_X 0x3204
#constant GRID_TEMP_4 0x3206
#constant GRID_TEMP_Y 0x3205
#constant MINE_NUMBER 0x3207
#constant GRID_TEMP_PLAYER 0x3208
#constant GRID_TEMP_NEIGHBOUR_LEFT 0x3209
#constant GRID_TEMP_NEIGHBOUR_RIGHT 0x320a
#constant GRID_TEMP_NEIGHBOUR_BOTTOM 0x320b
#constant GRID_TEMP_NEIGHBOUR_TOP 0x320c
#constant GRID_TEMP_MINE_COUNT 0x320d
#constant GRID_TEMP_5 0x320e
#constant GRID_TEMP_6 0x320f
#constant GRID_TEMP_INDEX 0x3210
#constant GRID_TEMP_NEIGHBOUR_LEFT_2 0x3211
#constant GRID_TEMP_NEIGHBOUR_RIGHT_2 0x3212
#constant GRID_TEMP_NEIGHBOUR_BOTTOM_2 0x3213
#constant GRID_TEMP_NEIGHBOUR_TOP_2 0x3214
#constant GRID_TEMP_REVEAL_X 0x3215
#constant GRID_TEMP_REVEAL_Y 0x3216
#constant GRID_TEMP_MINE_COUNT_2 0x3217
#constant GRID_TEMP_7 0x3218
#constant GRID_CLEAR_SPACES_REMAINING 0x3219

// The grid itself!
#constant GRID_ARRAY 0x3500
#constant MINES_ARRAY 0x3600

// An array that acts like a stack
#constant GRID_ZEROES_STACK_SIZE 0x3700
#constant GRID_ZEROES_STACK 0x3701

JUMP_COND(INCLUDE_GRID, grid_end:f)
copy INCLUDE_GRID ONE

// Initialise the various grid values
store GRID_UNPUSHED_NONE 0
store GRID_UNPUSHED_FLAG 1
store GRID_UNPUSHED_QUESTION_MARK 2
store GRID_PUSHED_MINE 3
store GRID_PUSHED_MINE_HIGHLIGHTED 4

// The mine numbers array
store GRID_MINES_0 100
store GRID_MINES_1 101
store GRID_MINES_2 102
store GRID_MINES_3 103
store GRID_MINES_4 104
store GRID_MINES_5 105
store GRID_MINES_6 106
store GRID_MINES_7 107
store GRID_MINES_8 108

#template_begin GET_GRID_VALUE_FOR_MINE_COUNT(TGT, COUNT)
add COUNT GRID_MINES_0
copy TGT RETURN
#template_end

#template_begin GET_MINE_COUNT_FROM_GRID_VALUE(TGT, VALUE)
sub VALUE GRID_MINES_0
copy TGT RETURN
#template_end

// Get the grid value for a given number of mines
#template_begin GET_MINES_VALUE(TGT, NUMBER_MINES)
ARRAY_GET(TGT, GRID_MINES_0, NUMBER_MINES)
#template_end

// Set a location on the grid to the given value
#template_begin SET_GRID(X, Y, VALUE)
COORDINATES_TO_INDEX(GRID_TEMP_1, X, Y)
ARRAY_SET(GRID_ARRAY, GRID_TEMP_1, VALUE)
#template_end

// Get the value of a location from the grid
#template_begin GET_GRID(TGT, X, Y)
COORDINATES_TO_INDEX(GRID_TEMP_1, X, Y)
ARRAY_GET(TGT, GRID_ARRAY, GRID_TEMP_1)
#template_end

// Do not call directly - adds a mine to the grid
#template_begin ADD_MINE(X, Y)
COORDINATES_TO_INDEX(GRID_TEMP_1, X, Y)
ARRAY_SET(MINES_ARRAY, GRID_TEMP_1, ONE)
#template_end

#template_begin HAS_MINE(X, Y)
COORDINATES_TO_INDEX(GRID_TEMP_1, X, Y)
ARRAY_GET(GRID_TEMP_2, MINES_ARRAY, GRID_TEMP_1)
eq GRID_TEMP_2 ONE
#template_end

#template_begin CLEAR_MINES()
store GRID_INDEX 0
clear_mines_loop:
// If we are at the end, jump out
gte GRID_INDEX GRID_SIZE
JUMP_COND(RETURN, clear_mines_end:f)
ARRAY_SET(MINES_ARRAY, GRID_INDEX, ZERO)
INCREMENT(GRID_INDEX)
JUMP(clear_mines_loop:b)
clear_mines_end:
copy GRID_CLEAR_SPACES_REMAINING GRID_SIZE
#template_end

// Begin by clearing the grid
#template_begin CLEAR_GRID()
store GRID_INDEX 0
clear_grid_loop:
// If we are at the end, jump out
gte GRID_INDEX GRID_SIZE
JUMP_COND(RETURN, clear_grid_end:f)
ARRAY_SET(GRID_ARRAY, GRID_INDEX, GRID_UNPUSHED_NONE)
INCREMENT(GRID_INDEX)
JUMP(clear_grid_loop:b)
clear_grid_end:
#template_end

// Get the sprite for the grid value
#template_begin GET_GRID_SPRITE_FOR_VALUE(TGT, VALUE)
copy TGT SPRITE_BLANKUNPUSHED
eq VALUE GRID_UNPUSHED_NONE
JUMP_COND(RETURN, get_grid_sprite_end:f)

copy TGT SPRITE_BLANKMINEFLAG
eq VALUE GRID_UNPUSHED_FLAG
JUMP_COND(RETURN, get_grid_sprite_end:f)

copy TGT SPRITE_BLANKQUESTIONMARK
eq VALUE GRID_UNPUSHED_QUESTION_MARK
JUMP_COND(RETURN, get_grid_sprite_end:f)

copy TGT SPRITE_MINE
eq VALUE GRID_PUSHED_MINE
JUMP_COND(RETURN, get_grid_sprite_end:f)

copy TGT SPRITE_MINEHIGHLIGHTED
eq VALUE GRID_PUSHED_MINE_HIGHLIGHTED
JUMP_COND(RETURN, get_grid_sprite_end:f)

GET_MINE_COUNT_FROM_GRID_VALUE(GRID_TEMP_1, VALUE)
GET_SPRITE_FOR_MINE_COUNT(TGT, GRID_TEMP_1)

get_grid_sprite_end:
nop
#template_end

// Draw an individual grid square
#template_begin DRAW_GRID_SQUARE(X, Y)
GET_GRID(GRID_TEMP_1, X, Y)
GET_GRID_SPRITE_FOR_VALUE(GRID_TEMP_2, GRID_TEMP_1)
GET_GRID_RECT(GRID_TEMP_3, X, Y)
draw GRID_TEMP_3 GRID_TEMP_2
#template_end

// Draw the entire grid to the screen!!
#template_begin DRAW_GRID()
store GRID_INDEX 0
draw_entire_grid_loop:
// If we are at the end, jump out
gte GRID_INDEX GRID_SIZE
JUMP_COND(RETURN, draw_entire_grid_end:f)

// Get the rectangle to draw in
INDEX_TO_COORDINATES(GRID_TEMP_X, GRID_TEMP_Y, GRID_INDEX)
DRAW_GRID_SQUARE(GRID_TEMP_X, GRID_TEMP_Y)

INCREMENT(GRID_INDEX)
JUMP(draw_entire_grid_loop:b)
draw_entire_grid_end:
#template_end

// Show all the mines on the grid
#template_begin REVEAL_MINES()
store GRID_INDEX 0
reveal_mines_loop:
// If we are at the end, jump out
gte GRID_INDEX GRID_SIZE
JUMP_COND(RETURN, reveal_mines_end:f)

// Does this square have a mine?
ARRAY_GET(GRID_TEMP_1, MINES_ARRAY, GRID_INDEX)
neq GRID_TEMP_1 ONE
JUMP_COND(RETURN, reveal_mines_continue:f)

// Yes! Show it
INDEX_TO_COORDINATES(GRID_TEMP_X, GRID_TEMP_Y, GRID_INDEX)
SET_GRID(GRID_TEMP_X, GRID_TEMP_Y, GRID_PUSHED_MINE)
DRAW_GRID_SQUARE(GRID_TEMP_X, GRID_TEMP_Y)

reveal_mines_continue:
INCREMENT(GRID_INDEX)
JUMP(reveal_mines_loop:b)
reveal_mines_end:
#template_end

// Add mines to the grid at random avoiding the player start position
#template_begin ADD_MINES(NUMBER_MINES, PLAYER_START_X, PLAYER_START_Y)
store MINE_NUMBER 0
COORDINATES_TO_INDEX(GRID_TEMP_PLAYER, PLAYER_START_X, PLAYER_START_Y)
add_mines_loop:

// Generate random coordinates
GET_RANDOM(GRID_INDEX, GRID_SIZE)

// Avoid the player position
eq GRID_TEMP_PLAYER GRID_INDEX
JUMP_COND(RETURN, add_mines_loop:b)

// Is there a mine already?
INDEX_TO_COORDINATES(GRID_TEMP_X, GRID_TEMP_Y, GRID_INDEX)
HAS_MINE(GRID_TEMP_X, GRID_TEMP_Y)
JUMP_COND(RETURN, add_mines_loop:b)

// No, so we can add this one
ADD_MINE(GRID_TEMP_X, GRID_TEMP_Y)
INCREMENT(MINE_NUMBER)

// Have we done all the mines?
lt MINE_NUMBER NUMBER_MINES
JUMP_COND(RETURN, add_mines_loop:b)

sub GRID_CLEAR_SPACES_REMAINING NUMBER_MINES
copy GRID_CLEAR_SPACES_REMAINING RETURN
#template_end

// Clear the grid at the start of the game
#template_begin RESET_GAME()
CLEAR_GRID()
CLEAR_MINES()
DRAW_GRID()
#template_end

// Assuming the coordinates are in the grid, this gets the grid
// coordinates from the raw x, y coordinates
#template_begin PIXEL_TO_GRID_COORDS(TGT_X, TGT_Y, PIXEL_X, PIXEL_Y)
div PIXEL_X GRID_SQUARE_SIZE
copy TGT_X RETURN

sub PIXEL_Y TWENTY
div RETURN GRID_SQUARE_SIZE
copy TGT_Y RETURN
#template_end

// Get the number of neighbouring mines (exluding the coordinate itself)
#template_begin GET_MINE_COUNT(TGT, X, Y)
// Store the neighbour coordinates...
store GRID_TEMP_MINE_COUNT 0
sub X ONE
copy GRID_TEMP_NEIGHBOUR_LEFT RETURN
add X ONE
copy GRID_TEMP_NEIGHBOUR_RIGHT RETURN
sub Y ONE
copy GRID_TEMP_NEIGHBOUR_TOP RETURN
add Y ONE
copy GRID_TEMP_NEIGHBOUR_BOTTOM RETURN

// Check each one

// Left
lt GRID_TEMP_NEIGHBOUR_LEFT ZERO
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(GRID_TEMP_NEIGHBOUR_LEFT, Y)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:

// Top left
lt GRID_TEMP_NEIGHBOUR_LEFT ZERO
JUMP_COND(RETURN, get_mine_count_skip:f)
lt GRID_TEMP_NEIGHBOUR_TOP ZERO
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(GRID_TEMP_NEIGHBOUR_LEFT, GRID_TEMP_NEIGHBOUR_TOP)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:

// Right
gte GRID_TEMP_NEIGHBOUR_RIGHT GRID_WIDTH
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(GRID_TEMP_NEIGHBOUR_RIGHT, Y)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:

// Top right
gte GRID_TEMP_NEIGHBOUR_RIGHT GRID_WIDTH
JUMP_COND(RETURN, get_mine_count_skip:f)
lt GRID_TEMP_NEIGHBOUR_TOP ZERO
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(GRID_TEMP_NEIGHBOUR_RIGHT, GRID_TEMP_NEIGHBOUR_TOP)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:

// Top
lt GRID_TEMP_NEIGHBOUR_TOP ZERO
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(X, GRID_TEMP_NEIGHBOUR_TOP)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:

// Bottom left
lt GRID_TEMP_NEIGHBOUR_LEFT ZERO
JUMP_COND(RETURN, get_mine_count_skip:f)
gte GRID_TEMP_NEIGHBOUR_BOTTOM GRID_HEIGHT
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(GRID_TEMP_NEIGHBOUR_LEFT, GRID_TEMP_NEIGHBOUR_BOTTOM)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:

// Bottom
gte GRID_TEMP_NEIGHBOUR_BOTTOM GRID_HEIGHT
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(X, GRID_TEMP_NEIGHBOUR_BOTTOM)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:

// Bottom right
gte GRID_TEMP_NEIGHBOUR_RIGHT GRID_WIDTH
JUMP_COND(RETURN, get_mine_count_skip:f)
gte GRID_TEMP_NEIGHBOUR_BOTTOM GRID_HEIGHT
JUMP_COND(RETURN, get_mine_count_skip:f)
HAS_MINE(GRID_TEMP_NEIGHBOUR_RIGHT, GRID_TEMP_NEIGHBOUR_BOTTOM)
JUMP_NOT_COND(RETURN, get_mine_count_skip:f)
INCREMENT(GRID_TEMP_MINE_COUNT)
get_mine_count_skip:
copy TGT GRID_TEMP_MINE_COUNT
#template_end

// Has this coordinate been pushed down? (Or mine revealed)
#template_begin IS_PUSHED(X, Y)
GET_GRID(GRID_TEMP_2, X, Y)
store GRID_TEMP_3 0

eq GRID_TEMP_2 GRID_UNPUSHED_NONE
JUMP_COND(RETURN, is_pushed_end:f)

eq GRID_TEMP_2 GRID_UNPUSHED_FLAG
JUMP_COND(RETURN, is_pushed_end:f)

eq GRID_TEMP_2 GRID_UNPUSHED_QUESTION_MARK
JUMP_COND(RETURN, is_pushed_end:f)

// It is actually pushed!
store GRID_TEMP_3 1
is_pushed_end:
copy RETURN GRID_TEMP_3
#template_end

// Push a square and reveal the right number of mines. This assumes the square is not itself a mine
// or else it doesn't make much sense to call this... This is also critical for recording the number of clear spaces correctly
#template_begin GET_AND_REVEAL_NUMBER_MINES(TGT, X, Y)
GET_MINE_COUNT(TGT, X, Y)
GET_MINES_VALUE(GRID_TEMP_6, TGT)
SET_GRID(X, Y, GRID_TEMP_6)
DRAW_GRID_SQUARE(X, Y)
DECREMENT(GRID_CLEAR_SPACES_REMAINING)
#template_end

// This is hard. Reveal all the zero squares from a coordinate with zero mines...
// Assumes the start coordinate is already revealed...
#template_begin REVEAL_ALL_ZEROES(START_X, START_Y)

// Initialise the stack with the start position
COORDINATES_TO_INDEX(GRID_TEMP_INDEX, START_X, START_Y)
STACK_CLEAR(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

// While the stack is not empty...
reveal_all_zeroes_loop:
eq GRID_ZEROES_STACK_SIZE ZERO
JUMP_COND(RETURN, reveal_all_zeroes_end:f)

// Get the next coordinate to check...
STACK_POP(GRID_TEMP_INDEX, GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK)
INDEX_TO_COORDINATES(GRID_TEMP_REVEAL_X, GRID_TEMP_REVEAL_Y, GRID_TEMP_INDEX)

// Reveal each relevant coordinate... Note we know the coordinates we are checking are not mines
sub GRID_TEMP_REVEAL_X ONE
copy GRID_TEMP_NEIGHBOUR_LEFT_2 RETURN
add GRID_TEMP_REVEAL_X ONE
copy GRID_TEMP_NEIGHBOUR_RIGHT_2 RETURN
sub GRID_TEMP_REVEAL_Y ONE
copy GRID_TEMP_NEIGHBOUR_TOP_2 RETURN
add GRID_TEMP_REVEAL_Y ONE
copy GRID_TEMP_NEIGHBOUR_BOTTOM_2 RETURN

// Left
lt GRID_TEMP_NEIGHBOUR_LEFT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_REVEAL_Y)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_REVEAL_Y)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_REVEAL_Y)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Top left
lt GRID_TEMP_NEIGHBOUR_LEFT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
lt GRID_TEMP_NEIGHBOUR_TOP_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_NEIGHBOUR_TOP_2)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_NEIGHBOUR_TOP_2)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_NEIGHBOUR_TOP_2)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Right
gte GRID_TEMP_NEIGHBOUR_RIGHT_2 GRID_WIDTH
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_REVEAL_Y)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_REVEAL_Y)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_REVEAL_Y)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Top right
gte GRID_TEMP_NEIGHBOUR_RIGHT_2 GRID_WIDTH
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
lt GRID_TEMP_NEIGHBOUR_TOP_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_NEIGHBOUR_TOP_2)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_NEIGHBOUR_TOP_2)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_NEIGHBOUR_TOP_2)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Top
lt GRID_TEMP_NEIGHBOUR_TOP_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_REVEAL_X, GRID_TEMP_NEIGHBOUR_TOP_2)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_REVEAL_X, GRID_TEMP_NEIGHBOUR_TOP_2)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_REVEAL_X, GRID_TEMP_NEIGHBOUR_TOP_2)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Bottom left
lt GRID_TEMP_NEIGHBOUR_LEFT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
gte GRID_TEMP_NEIGHBOUR_BOTTOM_2 GRID_HEIGHT
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_NEIGHBOUR_LEFT_2, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Bottom
gte GRID_TEMP_NEIGHBOUR_BOTTOM_2 GRID_HEIGHT
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_REVEAL_X, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_REVEAL_X, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_REVEAL_X, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Bottom right
gte GRID_TEMP_NEIGHBOUR_RIGHT_2 GRID_WIDTH
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
gte GRID_TEMP_NEIGHBOUR_BOTTOM_2 GRID_HEIGHT
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)
IS_PUSHED(GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

// Reveal it, and if there are no mines add it to the stack
GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_MINE_COUNT_2, GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
neq GRID_TEMP_MINE_COUNT_2 ZERO
JUMP_COND(RETURN, reveal_all_zeroes_skip:f)

COORDINATES_TO_INDEX(GRID_TEMP_INDEX, GRID_TEMP_NEIGHBOUR_RIGHT_2, GRID_TEMP_NEIGHBOUR_BOTTOM_2)
STACK_PUSH(GRID_ZEROES_STACK_SIZE, GRID_ZEROES_STACK, GRID_TEMP_INDEX)

reveal_all_zeroes_skip:

// Did it!! Phew
JUMP(reveal_all_zeroes_loop:b)

reveal_all_zeroes_end:
nop
#template_end

// Push a square! RESULT contains the outcome of pushing the square = Win, Lose, or Continue
#template_begin PUSH_SQUARE(RESULT, X, Y)

// If already pushed, ignore this
IS_PUSHED(X, Y)
JUMP_NOT_COND(RETURN, push_square_do:f)

// It is pushed, so ignore this and continue
copy RESULT GAME_CONTINUE
JUMP(push_square_end:f)

push_square_do:
// Check if we hit a mine
HAS_MINE(X, Y)
JUMP_COND(RETURN, push_square_lost:f)

GET_AND_REVEAL_NUMBER_MINES(GRID_TEMP_7, X, Y)
neq GRID_TEMP_7 ZERO
JUMP_COND(RETURN, push_square_check_win:f)
REVEAL_ALL_ZEROES(X, Y)

push_square_check_win:
// Did we win?
copy RESULT GAME_WIN
eq GRID_CLEAR_SPACES_REMAINING ZERO
JUMP_COND(RETURN, push_square_end:f)

// No. Keep going!
copy RESULT GAME_CONTINUE

JUMP(push_square_end:f)

push_square_lost:
// Oh no! Show all the mines...
REVEAL_MINES()
SET_GRID(MOUSE_COORD_X, MOUSE_COORD_Y, GRID_PUSHED_MINE_HIGHLIGHTED)
DRAW_GRID_SQUARE(MOUSE_COORD_X, MOUSE_COORD_Y)
copy RESULT GAME_LOSE

push_square_end:
nop
#template_end

// Right click a square on the grid
#template_begin RIGHT_CLICK_SQUARE(X, Y)

// If the square is already pushed, this is disabled
IS_PUSHED(X, Y)
JUMP_COND(RETURN, right_click_square_end:f)

// We cycle between blank, mine and question mark
GET_GRID(GRID_TEMP_7, X, Y)

copy GRID_TEMP_6 GRID_UNPUSHED_FLAG
eq GRID_TEMP_7 GRID_UNPUSHED_NONE
JUMP_COND(RETURN, right_click_square_set:f)

copy GRID_TEMP_6 GRID_UNPUSHED_QUESTION_MARK
eq GRID_TEMP_7 GRID_UNPUSHED_FLAG
JUMP_COND(RETURN, right_click_square_set:f)

copy GRID_TEMP_6 GRID_UNPUSHED_NONE
right_click_square_set:

SET_GRID(X, Y, GRID_TEMP_6)
DRAW_GRID_SQUARE(X, Y)

right_click_square_end:
#template_end

// Initialise the number of spaces to the full empty grid
copy GRID_CLEAR_SPACES_REMAINING GRID_SIZE

grid_end:
nop
